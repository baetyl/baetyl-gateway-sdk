// Code generated by protoc-gen-go. DO NOT EDIT.
// source: driver.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RequestArgs struct {
	Brokerid             uint32   `protobuf:"varint,1,opt,name=brokerid,proto3" json:"brokerid,omitempty"`
	Request              string   `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestArgs) Reset()         { *m = RequestArgs{} }
func (m *RequestArgs) String() string { return proto.CompactTextString(m) }
func (*RequestArgs) ProtoMessage()    {}
func (*RequestArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_521003751d596b5e, []int{0}
}

func (m *RequestArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestArgs.Unmarshal(m, b)
}
func (m *RequestArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestArgs.Marshal(b, m, deterministic)
}
func (m *RequestArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestArgs.Merge(m, src)
}
func (m *RequestArgs) XXX_Size() int {
	return xxx_messageInfo_RequestArgs.Size(m)
}
func (m *RequestArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RequestArgs proto.InternalMessageInfo

func (m *RequestArgs) GetBrokerid() uint32 {
	if m != nil {
		return m.Brokerid
	}
	return 0
}

func (m *RequestArgs) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

type ResponseResult struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseResult) Reset()         { *m = ResponseResult{} }
func (m *ResponseResult) String() string { return proto.CompactTextString(m) }
func (*ResponseResult) ProtoMessage()    {}
func (*ResponseResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_521003751d596b5e, []int{1}
}

func (m *ResponseResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseResult.Unmarshal(m, b)
}
func (m *ResponseResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseResult.Marshal(b, m, deterministic)
}
func (m *ResponseResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseResult.Merge(m, src)
}
func (m *ResponseResult) XXX_Size() int {
	return xxx_messageInfo_ResponseResult.Size(m)
}
func (m *ResponseResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseResult.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseResult proto.InternalMessageInfo

func (m *ResponseResult) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestArgs)(nil), "proto.RequestArgs")
	proto.RegisterType((*ResponseResult)(nil), "proto.ResponseResult")
}

func init() { proto.RegisterFile("driver.proto", fileDescriptor_521003751d596b5e) }

var fileDescriptor_521003751d596b5e = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x89, 0x6d, 0x13, 0x33, 0x5a, 0x0f, 0x0b, 0x42, 0xe8, 0xa9, 0x14, 0x0f, 0x3d, 0x45,
	0x8d, 0xe2, 0xc1, 0x9b, 0x56, 0x28, 0xde, 0x64, 0x72, 0xf3, 0x96, 0x92, 0x69, 0x09, 0x4a, 0x26,
	0xce, 0x4e, 0x7c, 0x2f, 0xdf, 0x50, 0xd8, 0x60, 0xb0, 0xc7, 0x39, 0xcd, 0xfe, 0xbb, 0xfb, 0xfd,
	0x7c, 0x0c, 0x9c, 0xd7, 0xd2, 0x7c, 0x93, 0xe4, 0x9d, 0xb0, 0xb2, 0x9b, 0x85, 0xb1, 0xda, 0xc0,
	0x19, 0xd2, 0x57, 0x4f, 0x5e, 0x9f, 0xe4, 0xe0, 0xdd, 0x02, 0x4e, 0x77, 0xc2, 0x1f, 0x24, 0x4d,
	0x9d, 0x45, 0xcb, 0x68, 0x3d, 0xc7, 0x31, 0xbb, 0x0c, 0x12, 0x19, 0xbe, 0x66, 0x27, 0xcb, 0x68,
	0x9d, 0xe2, 0x5f, 0x5c, 0x5d, 0xc1, 0x05, 0x92, 0xef, 0xb8, 0xf5, 0x84, 0xe4, 0xfb, 0x4f, 0x75,
	0x0e, 0xa6, 0x75, 0xa5, 0x55, 0xe8, 0x48, 0x31, 0x9c, 0x8b, 0x9f, 0x09, 0xc4, 0x2f, 0x41, 0xc1,
	0x3d, 0xc2, 0x7c, 0x4b, 0x3a, 0x84, 0xd7, 0x76, 0xcf, 0xce, 0x0d, 0x56, 0xf9, 0x3f, 0x97, 0xc5,
	0xe5, 0x78, 0x77, 0x54, 0xfd, 0x00, 0x69, 0x49, 0xba, 0xe1, 0x76, 0xdf, 0x1c, 0x2c, 0x5c, 0x01,
	0xb3, 0x92, 0xb4, 0xef, 0xac, 0x8c, 0x56, 0xa2, 0x16, 0xe6, 0x1e, 0x12, 0x24, 0x6f, 0xa5, 0x6e,
	0x61, 0x5a, 0x2a, 0x9b, 0xe4, 0x6e, 0x60, 0xb2, 0x25, 0x35, 0x12, 0xa5, 0x89, 0x28, 0x18, 0x62,
	0xa4, 0x8e, 0x25, 0x08, 0xbe, 0xb1, 0x57, 0xfb, 0xf6, 0x94, 0x0c, 0xcc, 0x73, 0xfa, 0x9e, 0xe4,
	0xd7, 0xe1, 0x65, 0x17, 0x87, 0x71, 0xf7, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x23, 0xf1, 0x74, 0x26,
	0xb8, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DriverClient is the client API for Driver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverClient interface {
	// 宿主（client） --> 驱动（server）
	GetDriverInfo(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error)
	SetConfig(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error)
	Setup(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error)
	Start(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error)
	Restart(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error)
	Stop(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error)
	Get(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error)
	Set(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error)
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) GetDriverInfo(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/proto.Driver/GetDriverInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetConfig(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/proto.Driver/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Setup(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/proto.Driver/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Start(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/proto.Driver/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Restart(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/proto.Driver/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Stop(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/proto.Driver/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Get(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/proto.Driver/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Set(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/proto.Driver/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServer is the server API for Driver service.
type DriverServer interface {
	// 宿主（client） --> 驱动（server）
	GetDriverInfo(context.Context, *RequestArgs) (*ResponseResult, error)
	SetConfig(context.Context, *RequestArgs) (*ResponseResult, error)
	Setup(context.Context, *RequestArgs) (*ResponseResult, error)
	Start(context.Context, *RequestArgs) (*ResponseResult, error)
	Restart(context.Context, *RequestArgs) (*ResponseResult, error)
	Stop(context.Context, *RequestArgs) (*ResponseResult, error)
	Get(context.Context, *RequestArgs) (*ResponseResult, error)
	Set(context.Context, *RequestArgs) (*ResponseResult, error)
}

// UnimplementedDriverServer can be embedded to have forward compatible implementations.
type UnimplementedDriverServer struct {
}

func (*UnimplementedDriverServer) GetDriverInfo(ctx context.Context, req *RequestArgs) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverInfo not implemented")
}
func (*UnimplementedDriverServer) SetConfig(ctx context.Context, req *RequestArgs) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (*UnimplementedDriverServer) Setup(ctx context.Context, req *RequestArgs) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (*UnimplementedDriverServer) Start(ctx context.Context, req *RequestArgs) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedDriverServer) Restart(ctx context.Context, req *RequestArgs) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (*UnimplementedDriverServer) Stop(ctx context.Context, req *RequestArgs) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedDriverServer) Get(ctx context.Context, req *RequestArgs) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDriverServer) Set(ctx context.Context, req *RequestArgs) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_GetDriverInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetDriverInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Driver/GetDriverInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetDriverInfo(ctx, req.(*RequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Driver/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetConfig(ctx, req.(*RequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Driver/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Setup(ctx, req.(*RequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Driver/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Start(ctx, req.(*RequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Driver/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Restart(ctx, req.(*RequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Driver/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Stop(ctx, req.(*RequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Driver/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Get(ctx, req.(*RequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Driver/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Set(ctx, req.(*RequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDriverInfo",
			Handler:    _Driver_GetDriverInfo_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _Driver_SetConfig_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _Driver_Setup_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Driver_Start_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Driver_Restart_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Driver_Stop_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Driver_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Driver_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver.proto",
}

// ReportClient is the client API for Report service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportClient interface {
	// 驱动（client） --> 宿主（server）
	Post(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error)
	State(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error)
}

type reportClient struct {
	cc *grpc.ClientConn
}

func NewReportClient(cc *grpc.ClientConn) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) Post(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/proto.Report/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportClient) State(ctx context.Context, in *RequestArgs, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, "/proto.Report/State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServer is the server API for Report service.
type ReportServer interface {
	// 驱动（client） --> 宿主（server）
	Post(context.Context, *RequestArgs) (*ResponseResult, error)
	State(context.Context, *RequestArgs) (*ResponseResult, error)
}

// UnimplementedReportServer can be embedded to have forward compatible implementations.
type UnimplementedReportServer struct {
}

func (*UnimplementedReportServer) Post(ctx context.Context, req *RequestArgs) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (*UnimplementedReportServer) State(ctx context.Context, req *RequestArgs) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}

func RegisterReportServer(s *grpc.Server, srv ReportServer) {
	s.RegisterService(&_Report_serviceDesc, srv)
}

func _Report_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Report/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).Post(ctx, req.(*RequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Report_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Report/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).State(ctx, req.(*RequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Report_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Report",
	HandlerType: (*ReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _Report_Post_Handler,
		},
		{
			MethodName: "State",
			Handler:    _Report_State_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver.proto",
}
